<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */
include("/jagg/jagg.jag");
include("/jagg/constants.jag");

jagg.block("header/default", {

    initialize: function (data) {

    },
    getInputs: function () {

    },
    getOutputs: function (inputs) {
        var user = jagg.getUser();
        var manager = jagg.module("manager");
        var userEmailAddress = manager.getEmailAddressForUser(user);
        var loggedInUserName;
        if (userEmailAddress == null) {
            loggedInUserName = user;
        } else {
            loggedInUserName = userEmailAddress;
        }
        var tenantDomain = manager.getTenantDomain(true);
        var cloudTypeProperties = manager.getCloudTypeProperties();
        var docUrl = manager.getPropertyValue(cloudTypeProperties.properties.documentationUrl);
        var cloudTitle = cloudTypeProperties.cloudTitle;
        var cloudIcon = cloudTypeProperties.cloudIcon;

        var isGoogleAnalyticsEnabled = manager.getPropertyValue(GOOGLE_ANALYTICS_ENABLED);
        var googleTrackingId = manager.getPropertyValue(GOOGLE_TRACKING_ID);
        var appCloudURL = manager.getPropertyValue(APP_CLOUD_URL);
        var integrationCloudURL = manager.getPropertyValue(INTEGRATION_CLOUD_URL);
        var apiCloudPublisherURL = manager.getPropertyValue(API_CLOUD_PUBLISHER__URL);
        var cloudMgtURL = manager.getPropertyValue(CLOUD_MGT_URL);
        var zopimChatId = manager.getPropertyValue(ZOPIM_CHAT_ID);

        var subscriptionManager = jagg.module("subscription");
        var isFirstLogin = subscriptionManager.isFirstLogin();
        if (isFirstLogin) {

            // login to cloud mgt and get cookie
            var cookie = null;
            try {
                var loginUrl = cloudMgtURL + "/site/blocks/user/authenticate/ajax/login.jag";
                var loginData = {
                    "action": "login",
                    "userName" : manager.getPropertyValue(CLOUD_ADMIN_USERNAME),
                    "password" : manager.getPropertyValue(CLOUD_ADMIN_PASSWORD)
                };

                log.info("loginUrl " + loginUrl);
                log.info("loginData " + stringify(loginData));

                var loginResult = post(loginUrl, loginData, {} , 'json');
                var loginResponse = loginResult.xhr.responseText;
                if (loginResponse.error == "true") {
                    throw new Error(loginResponse.message);
                } else {
                    cookie = loginResult.xhr.getResponseHeader(SET_COOKIE_HEADER);
                }
            } catch (e) {
                log.error("Exception occurred during establishing connection to " + serviceId);
                log.error(e);
                throw e;
            }

            //call cloud mgt api
            var data = {
                action: "informFirstLogin",
                tenantDomain: tenantDomain,
                cloudType: jagg.getSelectedCloud()
            };
            var header = {
                "Cookie" : cookie
            };

            var informFirstLoginApi= cloudMgtURL + "/site/blocks/admin/admin.jag";
            try {
                var result = post(informFirstLoginApi, data, header, 'json');
            } catch (e) {
                log.error("Exception occurred during inform first login to cloud mgt");
                log.error(e);
                throw e;
            }

            // This added temporary, to add subscription record when tenant login first time
            // once we integrate with the cloudmgt we need to remove this.
            // correct fix is invoking cloudmgt rest api
            /*
             var cloudType = jagg.getSelectedCloud();
             var plan = cloudTypeProperties.billing.defaultPlan;
             var trialPeriod = cloudTypeProperties.billing.trialPeriod;
             var startDate = new Packages.java.util.Date();
             var endDate = MYSQL_MAX_DATETIME_STRING;
             var sqlDateFormatter = new java.text.SimpleDateFormat(MYSQL_DATETIME_FORMAT);
             if(trialPeriod > 0) {
             var cal = Packages.java.util.Calendar.getInstance();
             cal.setTime(startDate);
             cal.add(Packages.java.util.Calendar.DATE, trialPeriod);
             endDate = sqlDateFormatter.format(cal.getTime());
             }
             adminModule.publishTenantSubscription(tenantDomain, cloudType, plan, sqlDateFormatter.format(startDate), endDate , "ACTIVE");
             */
        }

        var isAdminUser = manager.isAdminUser();
        var isBillingEnabled = false;
        var isPaidAccount = false;
        if (isAdminUser) {
            isBillingEnabled = cloudTypeProperties.billing.isBillingEnabled;
            isPaidAccount = subscriptionManager.isPaidAccount();
        }

        var remainingDays = -1;
        if (isBillingEnabled) {
            remainingDays = subscriptionManager.getRemainingDaysToUpgrade(tenantDomain, jagg.getSelectedCloud());
        }

        return {
            "user": user,
            "loggedInUserName": loggedInUserName,
            "tenantDomain": tenantDomain,
            "docUrl": docUrl,
            "cloudTitle" : cloudTitle,
            "isGoogleAnalyticsEnabled" : isGoogleAnalyticsEnabled,
            "googleTrackingId" : googleTrackingId,
            "appCloudURL" : appCloudURL,
            "integrationCloudURL" : integrationCloudURL,
            "apiCloudPublisherURL" : apiCloudPublisherURL,
            "cloudMgtURL" : cloudMgtURL,
            "cloudIcon" : cloudIcon,
            "zopimChatId": zopimChatId,
            "isBillingEnabled": isBillingEnabled,
            "remainingDays" : remainingDays,
            "isPaidAccount" : isPaidAccount,
            "isAdminUser" : isAdminUser
        };
    }
});
%>