<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include('/jagg/constants.jag');
include("/jagg/jagg.jag");

jagg.block("application", {
    initialize:function (data) {

    },
    getInputs:function () {

    },

    getOutputs:function (inputs) {

        var applicationModule = jagg.module("application");
        var databaseModule = jagg.module("databases");
        var modManager = jagg.module("manager");
        var runtimes = applicationModule.getAllRuntimes(inputs.appTypeName);
        var appTypePropertyConfPath = jagg.getAppTypePropertyConfFilePath();
        var parsedObject = parse(appTypePropertyConfPath);
        var appTypesProperties = require(parsedObject);
        var appType = appTypesProperties[inputs.appTypeName];
        var applicationName = inputs.applicationName;
        var runninngApplicationCount = applicationModule.getRunningApplicationVersionCount();
        var notAllowedEnvVariables = applicationModule.getNotAllowedEnvVariables();
        var throttlingModule = jagg.module("throttling");
        var maxAppCount = throttlingModule.getMaxInstanceCount();
        var allowedContainerSpecs = applicationModule.
            getAllowedContainerSpecificationsForRuntime(runtimes[0].id);
        var defaultVersion = applicationModule.getDefaultVersion(inputs.applicationName);
        var appTypeCount = applicationModule.getAllAppTypes().length;
        var cloudSpecificApplicationRepresentation = modManager.getCloudTypeProperties().cloudSpecificApplicationRepresentation;
        var applications = applicationModule.getAllApplications();

        var requestNewAppTypeSubjectMessage = 'Requesting a new runtime for ' + cloudSpecificApplicationRepresentation.toLowerCase() + ' type: ' + inputs.appTypeName;
        var requestNewAppTypeURL = modManager.getPropertyValue(CLOUD_MGT_URL) + CONTACT_US_URL +
                '?cloudType=' + jagg.getSelectedCloud() + '&subject=' + requestNewAppTypeSubjectMessage;

        var requestMoreAppsSubjectMessage = 'Requesting to run more than ' + maxAppCount + ' ' + cloudSpecificApplicationRepresentation.toLowerCase() + 's';
        var requestMoreAppseURL = modManager.getPropertyValue(CLOUD_MGT_URL) + CONTACT_US_URL +
                '?cloudType=' + jagg.getSelectedCloud() + '&subject=' + requestMoreAppsSubjectMessage;
        var allDBInfo = databaseModule.getAllDatabasesInfo();
        var noOfDbs = allDBInfo.length;

        var isThrottled = throttlingModule.getThrottledStatus(allowedContainerSpecs);
        //get container spec list that fit to resources
        var throttledAllowedContainerSpecs = throttlingModule.getthrottledAllowedContainerSpecs(allowedContainerSpecs);
        return {
            "runtimes" : runtimes,
            "appType" : appType,
            "applicationName" : applicationName,
            "runninngApplicationCount" : runninngApplicationCount,
            "notAllowedEnvVariables" : notAllowedEnvVariables,
            "maxAppCount" : maxAppCount,
            "allowedContainerSpecs" : allowedContainerSpecs,
            "defaultVersion" : defaultVersion,
            "appTypeCount" : appTypeCount,
            "cloudSpecificApplicationRepresentation" : cloudSpecificApplicationRepresentation,
            "applications" : applications,
            "requestNewAppTypeURL" : requestNewAppTypeURL,
            "requestMoreAppseURL" : requestMoreAppseURL,
            "allDBInfo": allDBInfo,
            "noOfDbs": noOfDbs,
            "isThrottled": isThrottled,
            "throttledAllowedContainerSpecs": throttledAllowedContainerSpecs
        };
    }
});
%>
